{"ast":null,"code":"import React,{useEffect,useState}from'react';import{Navigate,useLocation}from'react-router-dom';import{jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{children,redirectPath='/admin-login'}=_ref;const[isAuthenticated,setIsAuthenticated]=useState(null);const[isLoading,setIsLoading]=useState(true);const location=useLocation();useEffect(()=>{// More reliable authentication check\nconst authStatus=localStorage.getItem('isAuthenticated')==='true';console.log(\"Auth check result:\",authStatus);setIsAuthenticated(authStatus);setIsLoading(false);// Add event listener for storage changes (in case auth changes in another tab)\nconst handleStorageChange=e=>{if(e.key==='isAuthenticated'){setIsAuthenticated(e.newValue==='true');}};window.addEventListener('storage',handleStorageChange);return()=>window.removeEventListener('storage',handleStorageChange);},[]);// Show loading indicator while checking authentication\nif(isLoading){return/*#__PURE__*/_jsx(\"div\",{className:\"admin-loading\",children:\"Checking authentication...\"});}// Redirect to login page if not authenticated\nif(!isAuthenticated){console.log(\"Not authenticated, redirecting to:\",redirectPath);// Pass the current location so we can redirect back after login\nreturn/*#__PURE__*/_jsx(Navigate,{to:redirectPath,state:{from:location},replace:true});}// Render children if authenticated\nreturn/*#__PURE__*/_jsx(_Fragment,{children:children});};export default ProtectedRoute;","map":{"version":3,"names":["React","useEffect","useState","Navigate","useLocation","jsx","_jsx","Fragment","_Fragment","ProtectedRoute","_ref","children","redirectPath","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","location","authStatus","localStorage","getItem","console","log","handleStorageChange","e","key","newValue","window","addEventListener","removeEventListener","className","to","state","from","replace"],"sources":["D:/infinity-react/src/components/ProtectedRoute.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\n\r\ninterface ProtectedRouteProps {\r\n  children: React.ReactNode;\r\n  redirectPath?: string;\r\n}\r\n\r\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ \r\n  children, \r\n  redirectPath = '/admin-login' \r\n}) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const location = useLocation();\r\n  \r\n  useEffect(() => {\r\n    // More reliable authentication check\r\n    const authStatus = localStorage.getItem('isAuthenticated') === 'true';\r\n    console.log(\"Auth check result:\", authStatus);\r\n    setIsAuthenticated(authStatus);\r\n    setIsLoading(false);\r\n    \r\n    // Add event listener for storage changes (in case auth changes in another tab)\r\n    const handleStorageChange = (e: StorageEvent) => {\r\n      if (e.key === 'isAuthenticated') {\r\n        setIsAuthenticated(e.newValue === 'true');\r\n      }\r\n    };\r\n    \r\n    window.addEventListener('storage', handleStorageChange);\r\n    return () => window.removeEventListener('storage', handleStorageChange);\r\n  }, []);\r\n  \r\n  // Show loading indicator while checking authentication\r\n  if (isLoading) {\r\n    return <div className=\"admin-loading\">Checking authentication...</div>;\r\n  }\r\n  \r\n  // Redirect to login page if not authenticated\r\n  if (!isAuthenticated) {\r\n    console.log(\"Not authenticated, redirecting to:\", redirectPath);\r\n    // Pass the current location so we can redirect back after login\r\n    return <Navigate to={redirectPath} state={{ from: location }} replace />;\r\n  }\r\n  \r\n  // Render children if authenticated\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,QAAQ,CAAEC,WAAW,KAAQ,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,QAAA,IAAAC,SAAA,yBAOzD,KAAM,CAAAC,cAA6C,CAAGC,IAAA,EAGhD,IAHiD,CACrDC,QAAQ,CACRC,YAAY,CAAG,cACjB,CAAC,CAAAF,IAAA,CACC,KAAM,CAACG,eAAe,CAAEC,kBAAkB,CAAC,CAAGZ,QAAQ,CAAiB,IAAI,CAAC,CAC5E,KAAM,CAACa,SAAS,CAAEC,YAAY,CAAC,CAAGd,QAAQ,CAAC,IAAI,CAAC,CAChD,KAAM,CAAAe,QAAQ,CAAGb,WAAW,CAAC,CAAC,CAE9BH,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAiB,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,GAAK,MAAM,CACrEC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEJ,UAAU,CAAC,CAC7CJ,kBAAkB,CAACI,UAAU,CAAC,CAC9BF,YAAY,CAAC,KAAK,CAAC,CAEnB;AACA,KAAM,CAAAO,mBAAmB,CAAIC,CAAe,EAAK,CAC/C,GAAIA,CAAC,CAACC,GAAG,GAAK,iBAAiB,CAAE,CAC/BX,kBAAkB,CAACU,CAAC,CAACE,QAAQ,GAAK,MAAM,CAAC,CAC3C,CACF,CAAC,CAEDC,MAAM,CAACC,gBAAgB,CAAC,SAAS,CAAEL,mBAAmB,CAAC,CACvD,MAAO,IAAMI,MAAM,CAACE,mBAAmB,CAAC,SAAS,CAAEN,mBAAmB,CAAC,CACzE,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,GAAIR,SAAS,CAAE,CACb,mBAAOT,IAAA,QAAKwB,SAAS,CAAC,eAAe,CAAAnB,QAAA,CAAC,4BAA0B,CAAK,CAAC,CACxE,CAEA;AACA,GAAI,CAACE,eAAe,CAAE,CACpBQ,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAEV,YAAY,CAAC,CAC/D;AACA,mBAAON,IAAA,CAACH,QAAQ,EAAC4B,EAAE,CAAEnB,YAAa,CAACoB,KAAK,CAAE,CAAEC,IAAI,CAAEhB,QAAS,CAAE,CAACiB,OAAO,MAAE,CAAC,CAC1E,CAEA;AACA,mBAAO5B,IAAA,CAAAE,SAAA,EAAAG,QAAA,CAAGA,QAAQ,CAAG,CAAC,CACxB,CAAC,CAED,cAAe,CAAAF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}