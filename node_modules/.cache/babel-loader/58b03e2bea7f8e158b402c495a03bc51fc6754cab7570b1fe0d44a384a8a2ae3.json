{"ast":null,"code":"var _jsxFileName = \"D:\\\\infinity-react\\\\src\\\\components\\\\Gallery.tsx\";\nimport React from 'react';\nimport './Gallery.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Gallery = ({\n  images = []\n}) => {\n  // Default images if none are provided\n  const defaultImages = ['/images/gallery/image1.jpg', '/images/gallery/image2.jpg', '/images/gallery/image3.jpg', '/images/gallery/image4.jpg', '/images/gallery/image5.jpg', '/images/gallery/image6.jpg', '/images/gallery/image7.jpg', '/images/gallery/image8.jpg'];\n  const galleryImages = images.length > 0 ? images : defaultImages;\n\n  // Duplicate images for the illusion of infinite scroll\n  const allImages = [...galleryImages, ...galleryImages];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gallery-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"gallery-title\",\n      children: \"Event Gallery\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gallery-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"infinite-scroll-gallery\",\n        children: allImages.map((img, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gallery-frame\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: img,\n            alt: `Gallery image ${index + 1}`,\n            onError: e => {\n              e.currentTarget.src = \"/images/placeholder.jpg\";\n              e.currentTarget.classList.add(\"error-image\");\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"frame-overlay\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_c = Gallery;\nexport default Gallery;\nvar _c;\n$RefreshReg$(_c, \"Gallery\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Gallery","images","defaultImages","galleryImages","length","allImages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","img","index","src","alt","onError","e","currentTarget","classList","add","_c","$RefreshReg$"],"sources":["D:/infinity-react/src/components/Gallery.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Gallery.css';\r\n\r\ninterface GalleryProps {\r\n  images?: string[];\r\n}\r\n\r\nconst Gallery: React.FC<GalleryProps> = ({ images = [] }) => {\r\n  // Default images if none are provided\r\n  const defaultImages = [\r\n    '/images/gallery/image1.jpg',\r\n    '/images/gallery/image2.jpg',\r\n    '/images/gallery/image3.jpg',\r\n    '/images/gallery/image4.jpg',\r\n    '/images/gallery/image5.jpg',\r\n    '/images/gallery/image6.jpg',\r\n    '/images/gallery/image7.jpg',\r\n    '/images/gallery/image8.jpg',\r\n  ];\r\n\r\n  const galleryImages = images.length > 0 ? images : defaultImages;\r\n  \r\n  // Duplicate images for the illusion of infinite scroll\r\n  const allImages = [...galleryImages, ...galleryImages];\r\n\r\n  return (\r\n    <div className=\"gallery-section\">\r\n      <h2 className=\"gallery-title\">Event Gallery</h2>\r\n      <div className=\"gallery-container\">\r\n        <div className=\"infinite-scroll-gallery\">\r\n          {allImages.map((img, index) => (\r\n            <div className=\"gallery-frame\" key={index}>\r\n              <img \r\n                src={img} \r\n                alt={`Gallery image ${index + 1}`} \r\n                onError={(e) => {\r\n                  e.currentTarget.src = \"/images/placeholder.jpg\";\r\n                  e.currentTarget.classList.add(\"error-image\");\r\n                }}\r\n              />\r\n              <div className=\"frame-overlay\"></div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Gallery;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAA+B,OAAO;AAClD,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMvB,MAAMC,OAA+B,GAAGA,CAAC;EAAEC,MAAM,GAAG;AAAG,CAAC,KAAK;EAC3D;EACA,MAAMC,aAAa,GAAG,CACpB,4BAA4B,EAC5B,4BAA4B,EAC5B,4BAA4B,EAC5B,4BAA4B,EAC5B,4BAA4B,EAC5B,4BAA4B,EAC5B,4BAA4B,EAC5B,4BAA4B,CAC7B;EAED,MAAMC,aAAa,GAAGF,MAAM,CAACG,MAAM,GAAG,CAAC,GAAGH,MAAM,GAAGC,aAAa;;EAEhE;EACA,MAAMG,SAAS,GAAG,CAAC,GAAGF,aAAa,EAAE,GAAGA,aAAa,CAAC;EAEtD,oBACEJ,OAAA;IAAKO,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BR,OAAA;MAAIO,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChDZ,OAAA;MAAKO,SAAS,EAAC,mBAAmB;MAAAC,QAAA,eAChCR,OAAA;QAAKO,SAAS,EAAC,yBAAyB;QAAAC,QAAA,EACrCF,SAAS,CAACO,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACxBf,OAAA;UAAKO,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BR,OAAA;YACEgB,GAAG,EAAEF,GAAI;YACTG,GAAG,EAAE,iBAAiBF,KAAK,GAAG,CAAC,EAAG;YAClCG,OAAO,EAAGC,CAAC,IAAK;cACdA,CAAC,CAACC,aAAa,CAACJ,GAAG,GAAG,yBAAyB;cAC/CG,CAAC,CAACC,aAAa,CAACC,SAAS,CAACC,GAAG,CAAC,aAAa,CAAC;YAC9C;UAAE;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eACFZ,OAAA;YAAKO,SAAS,EAAC;UAAe;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA,GATHG,KAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAUpC,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACW,EAAA,GAxCItB,OAA+B;AA0CrC,eAAeA,OAAO;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}