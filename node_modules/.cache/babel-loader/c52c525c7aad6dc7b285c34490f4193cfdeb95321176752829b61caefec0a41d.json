{"ast":null,"code":"var _jsxFileName = \"D:\\\\infinity-react\\\\src\\\\components\\\\HeroBackground.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport './HeroBackground.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HeroBackground = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    const updateSize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    updateSize();\n    window.addEventListener('resize', updateSize);\n\n    // Create particles\n    const particles = [];\n    const particleCount = Math.min(100, Math.floor(window.innerWidth / 10));\n    class Particle {\n      constructor() {\n        this.x = void 0;\n        this.y = void 0;\n        this.size = void 0;\n        this.speedX = void 0;\n        this.speedY = void 0;\n        this.color = void 0;\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n        this.size = Math.random() * 3 + 1;\n        this.speedX = (Math.random() - 0.5) * 0.5;\n        this.speedY = (Math.random() - 0.5) * 0.5;\n\n        // Create a purple/violet gradient palette\n        const colors = ['rgba(157, 78, 221, 0.7)',\n        // Primary purple\n        'rgba(120, 60, 180, 0.6)',\n        // Darker purple\n        'rgba(180, 100, 240, 0.5)',\n        // Lighter purple\n        'rgba(200, 120, 255, 0.4)' // Violet\n        ];\n        this.color = colors[Math.floor(Math.random() * colors.length)];\n      }\n      update() {\n        this.x += this.speedX;\n        this.y += this.speedY;\n        if (this.x > canvas.width || this.x < 0) this.speedX = -this.speedX;\n        if (this.y > canvas.height || this.y < 0) this.speedY = -this.speedY;\n      }\n      draw() {\n        if (!ctx) return;\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n\n    // Create initial particles\n    for (let i = 0; i < particleCount; i++) {\n      particles.push(new Particle());\n    }\n\n    // Connect particles with lines if they're close enough\n    const connectParticles = () => {\n      if (!ctx) return;\n      for (let i = 0; i < particles.length; i++) {\n        for (let j = i + 1; j < particles.length; j++) {\n          const dx = particles[i].x - particles[j].x;\n          const dy = particles[i].y - particles[j].y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance < 100) {\n            ctx.beginPath();\n            ctx.strokeStyle = `rgba(157, 78, 221, ${0.1 * (1 - distance / 100)})`;\n            ctx.lineWidth = 0.5;\n            ctx.moveTo(particles[i].x, particles[i].y);\n            ctx.lineTo(particles[j].x, particles[j].y);\n            ctx.stroke();\n            ctx.closePath();\n          }\n        }\n      }\n    };\n\n    // Animation loop\n    let animationId;\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw grid pattern\n      ctx.lineWidth = 0.2;\n      ctx.strokeStyle = 'rgba(157, 78, 221, 0.15)';\n\n      // Vertical lines\n      for (let x = 0; x <= canvas.width; x += 30) {\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, canvas.height);\n        ctx.stroke();\n      }\n\n      // Horizontal lines\n      for (let y = 0; y <= canvas.height; y += 30) {\n        ctx.beginPath();\n        ctx.moveTo(0, y);\n        ctx.lineTo(canvas.width, y);\n        ctx.stroke();\n      }\n\n      // Update and draw particles\n      for (let i = 0; i < particles.length; i++) {\n        particles[i].update();\n        particles[i].draw();\n      }\n      connectParticles();\n      animationId = requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', updateSize);\n      cancelAnimationFrame(animationId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hero-background-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: \"hero-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hero-gradient-overlay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(HeroBackground, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = HeroBackground;\nexport default HeroBackground;\nvar _c;\n$RefreshReg$(_c, \"HeroBackground\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","HeroBackground","_s","canvasRef","canvas","current","ctx","getContext","updateSize","width","window","innerWidth","height","innerHeight","addEventListener","particles","particleCount","Math","min","floor","Particle","constructor","x","y","size","speedX","speedY","color","random","colors","length","update","draw","fillStyle","beginPath","arc","PI","fill","i","push","connectParticles","j","dx","dy","distance","sqrt","strokeStyle","lineWidth","moveTo","lineTo","stroke","closePath","animationId","animate","clearRect","requestAnimationFrame","removeEventListener","cancelAnimationFrame","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/infinity-react/src/components/HeroBackground.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport './HeroBackground.css';\r\n\r\nconst HeroBackground = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  \r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n    \r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n    \r\n    // Set canvas size\r\n    const updateSize = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n    \r\n    updateSize();\r\n    window.addEventListener('resize', updateSize);\r\n    \r\n    // Create particles\r\n    const particles: Particle[] = [];\r\n    const particleCount = Math.min(100, Math.floor(window.innerWidth / 10));\r\n    \r\n    class Particle {\r\n      x: number;\r\n      y: number;\r\n      size: number;\r\n      speedX: number;\r\n      speedY: number;\r\n      color: string;\r\n      \r\n      constructor() {\r\n        this.x = Math.random() * canvas.width;\r\n        this.y = Math.random() * canvas.height;\r\n        this.size = Math.random() * 3 + 1;\r\n        this.speedX = (Math.random() - 0.5) * 0.5;\r\n        this.speedY = (Math.random() - 0.5) * 0.5;\r\n        \r\n        // Create a purple/violet gradient palette\r\n        const colors = [\r\n          'rgba(157, 78, 221, 0.7)',  // Primary purple\r\n          'rgba(120, 60, 180, 0.6)',  // Darker purple\r\n          'rgba(180, 100, 240, 0.5)', // Lighter purple\r\n          'rgba(200, 120, 255, 0.4)'  // Violet\r\n        ];\r\n        this.color = colors[Math.floor(Math.random() * colors.length)];\r\n      }\r\n      \r\n      update() {\r\n        this.x += this.speedX;\r\n        this.y += this.speedY;\r\n        \r\n        if (this.x > canvas.width || this.x < 0) this.speedX = -this.speedX;\r\n        if (this.y > canvas.height || this.y < 0) this.speedY = -this.speedY;\r\n      }\r\n      \r\n      draw() {\r\n        if (!ctx) return;\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\r\n        ctx.fill();\r\n      }\r\n    }\r\n    \r\n    // Create initial particles\r\n    for (let i = 0; i < particleCount; i++) {\r\n      particles.push(new Particle());\r\n    }\r\n    \r\n    // Connect particles with lines if they're close enough\r\n    const connectParticles = () => {\r\n      if (!ctx) return;\r\n      \r\n      for (let i = 0; i < particles.length; i++) {\r\n        for (let j = i + 1; j < particles.length; j++) {\r\n          const dx = particles[i].x - particles[j].x;\r\n          const dy = particles[i].y - particles[j].y;\r\n          const distance = Math.sqrt(dx * dx + dy * dy);\r\n          \r\n          if (distance < 100) {\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = `rgba(157, 78, 221, ${0.1 * (1 - distance / 100)})`;\r\n            ctx.lineWidth = 0.5;\r\n            ctx.moveTo(particles[i].x, particles[i].y);\r\n            ctx.lineTo(particles[j].x, particles[j].y);\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n          }\r\n        }\r\n      }\r\n    };\r\n    \r\n    // Animation loop\r\n    let animationId: number;\r\n    const animate = () => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      \r\n      // Draw grid pattern\r\n      ctx.lineWidth = 0.2;\r\n      ctx.strokeStyle = 'rgba(157, 78, 221, 0.15)';\r\n      \r\n      // Vertical lines\r\n      for (let x = 0; x <= canvas.width; x += 30) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x, 0);\r\n        ctx.lineTo(x, canvas.height);\r\n        ctx.stroke();\r\n      }\r\n      \r\n      // Horizontal lines\r\n      for (let y = 0; y <= canvas.height; y += 30) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, y);\r\n        ctx.lineTo(canvas.width, y);\r\n        ctx.stroke();\r\n      }\r\n      \r\n      // Update and draw particles\r\n      for (let i = 0; i < particles.length; i++) {\r\n        particles[i].update();\r\n        particles[i].draw();\r\n      }\r\n      \r\n      connectParticles();\r\n      \r\n      animationId = requestAnimationFrame(animate);\r\n    };\r\n    \r\n    animate();\r\n    \r\n    // Cleanup\r\n    return () => {\r\n      window.removeEventListener('resize', updateSize);\r\n      cancelAnimationFrame(animationId);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"hero-background-container\">\r\n      <canvas ref={canvasRef} className=\"hero-canvas\"></canvas>\r\n      <div className=\"hero-gradient-overlay\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HeroBackground;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,SAAS,GAAGL,MAAM,CAAoB,IAAI,CAAC;EAEjDD,SAAS,CAAC,MAAM;IACd,MAAMO,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;IAEb,MAAME,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,IAAI,CAACD,GAAG,EAAE;;IAEV;IACA,MAAME,UAAU,GAAGA,CAAA,KAAM;MACvBJ,MAAM,CAACK,KAAK,GAAGC,MAAM,CAACC,UAAU;MAChCP,MAAM,CAACQ,MAAM,GAAGF,MAAM,CAACG,WAAW;IACpC,CAAC;IAEDL,UAAU,CAAC,CAAC;IACZE,MAAM,CAACI,gBAAgB,CAAC,QAAQ,EAAEN,UAAU,CAAC;;IAE7C;IACA,MAAMO,SAAqB,GAAG,EAAE;IAChC,MAAMC,aAAa,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAG,EAAED,IAAI,CAACE,KAAK,CAACT,MAAM,CAACC,UAAU,GAAG,EAAE,CAAC,CAAC;IAEvE,MAAMS,QAAQ,CAAC;MAQbC,WAAWA,CAAA,EAAG;QAAA,KAPdC,CAAC;QAAA,KACDC,CAAC;QAAA,KACDC,IAAI;QAAA,KACJC,MAAM;QAAA,KACNC,MAAM;QAAA,KACNC,KAAK;QAGH,IAAI,CAACL,CAAC,GAAGL,IAAI,CAACW,MAAM,CAAC,CAAC,GAAGxB,MAAM,CAACK,KAAK;QACrC,IAAI,CAACc,CAAC,GAAGN,IAAI,CAACW,MAAM,CAAC,CAAC,GAAGxB,MAAM,CAACQ,MAAM;QACtC,IAAI,CAACY,IAAI,GAAGP,IAAI,CAACW,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;QACjC,IAAI,CAACH,MAAM,GAAG,CAACR,IAAI,CAACW,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG;QACzC,IAAI,CAACF,MAAM,GAAG,CAACT,IAAI,CAACW,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG;;QAEzC;QACA,MAAMC,MAAM,GAAG,CACb,yBAAyB;QAAG;QAC5B,yBAAyB;QAAG;QAC5B,0BAA0B;QAAE;QAC5B,0BAA0B,CAAE;QAAA,CAC7B;QACD,IAAI,CAACF,KAAK,GAAGE,MAAM,CAACZ,IAAI,CAACE,KAAK,CAACF,IAAI,CAACW,MAAM,CAAC,CAAC,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC;MAChE;MAEAC,MAAMA,CAAA,EAAG;QACP,IAAI,CAACT,CAAC,IAAI,IAAI,CAACG,MAAM;QACrB,IAAI,CAACF,CAAC,IAAI,IAAI,CAACG,MAAM;QAErB,IAAI,IAAI,CAACJ,CAAC,GAAGlB,MAAM,CAACK,KAAK,IAAI,IAAI,CAACa,CAAC,GAAG,CAAC,EAAE,IAAI,CAACG,MAAM,GAAG,CAAC,IAAI,CAACA,MAAM;QACnE,IAAI,IAAI,CAACF,CAAC,GAAGnB,MAAM,CAACQ,MAAM,IAAI,IAAI,CAACW,CAAC,GAAG,CAAC,EAAE,IAAI,CAACG,MAAM,GAAG,CAAC,IAAI,CAACA,MAAM;MACtE;MAEAM,IAAIA,CAAA,EAAG;QACL,IAAI,CAAC1B,GAAG,EAAE;QACVA,GAAG,CAAC2B,SAAS,GAAG,IAAI,CAACN,KAAK;QAC1BrB,GAAG,CAAC4B,SAAS,CAAC,CAAC;QACf5B,GAAG,CAAC6B,GAAG,CAAC,IAAI,CAACb,CAAC,EAAE,IAAI,CAACC,CAAC,EAAE,IAAI,CAACC,IAAI,EAAE,CAAC,EAAEP,IAAI,CAACmB,EAAE,GAAG,CAAC,CAAC;QAClD9B,GAAG,CAAC+B,IAAI,CAAC,CAAC;MACZ;IACF;;IAEA;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtB,aAAa,EAAEsB,CAAC,EAAE,EAAE;MACtCvB,SAAS,CAACwB,IAAI,CAAC,IAAInB,QAAQ,CAAC,CAAC,CAAC;IAChC;;IAEA;IACA,MAAMoB,gBAAgB,GAAGA,CAAA,KAAM;MAC7B,IAAI,CAAClC,GAAG,EAAE;MAEV,KAAK,IAAIgC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvB,SAAS,CAACe,MAAM,EAAEQ,CAAC,EAAE,EAAE;QACzC,KAAK,IAAIG,CAAC,GAAGH,CAAC,GAAG,CAAC,EAAEG,CAAC,GAAG1B,SAAS,CAACe,MAAM,EAAEW,CAAC,EAAE,EAAE;UAC7C,MAAMC,EAAE,GAAG3B,SAAS,CAACuB,CAAC,CAAC,CAAChB,CAAC,GAAGP,SAAS,CAAC0B,CAAC,CAAC,CAACnB,CAAC;UAC1C,MAAMqB,EAAE,GAAG5B,SAAS,CAACuB,CAAC,CAAC,CAACf,CAAC,GAAGR,SAAS,CAAC0B,CAAC,CAAC,CAAClB,CAAC;UAC1C,MAAMqB,QAAQ,GAAG3B,IAAI,CAAC4B,IAAI,CAACH,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;UAE7C,IAAIC,QAAQ,GAAG,GAAG,EAAE;YAClBtC,GAAG,CAAC4B,SAAS,CAAC,CAAC;YACf5B,GAAG,CAACwC,WAAW,GAAG,sBAAsB,GAAG,IAAI,CAAC,GAAGF,QAAQ,GAAG,GAAG,CAAC,GAAG;YACrEtC,GAAG,CAACyC,SAAS,GAAG,GAAG;YACnBzC,GAAG,CAAC0C,MAAM,CAACjC,SAAS,CAACuB,CAAC,CAAC,CAAChB,CAAC,EAAEP,SAAS,CAACuB,CAAC,CAAC,CAACf,CAAC,CAAC;YAC1CjB,GAAG,CAAC2C,MAAM,CAAClC,SAAS,CAAC0B,CAAC,CAAC,CAACnB,CAAC,EAAEP,SAAS,CAAC0B,CAAC,CAAC,CAAClB,CAAC,CAAC;YAC1CjB,GAAG,CAAC4C,MAAM,CAAC,CAAC;YACZ5C,GAAG,CAAC6C,SAAS,CAAC,CAAC;UACjB;QACF;MACF;IACF,CAAC;;IAED;IACA,IAAIC,WAAmB;IACvB,MAAMC,OAAO,GAAGA,CAAA,KAAM;MACpB/C,GAAG,CAACgD,SAAS,CAAC,CAAC,EAAE,CAAC,EAAElD,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACQ,MAAM,CAAC;;MAEhD;MACAN,GAAG,CAACyC,SAAS,GAAG,GAAG;MACnBzC,GAAG,CAACwC,WAAW,GAAG,0BAA0B;;MAE5C;MACA,KAAK,IAAIxB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIlB,MAAM,CAACK,KAAK,EAAEa,CAAC,IAAI,EAAE,EAAE;QAC1ChB,GAAG,CAAC4B,SAAS,CAAC,CAAC;QACf5B,GAAG,CAAC0C,MAAM,CAAC1B,CAAC,EAAE,CAAC,CAAC;QAChBhB,GAAG,CAAC2C,MAAM,CAAC3B,CAAC,EAAElB,MAAM,CAACQ,MAAM,CAAC;QAC5BN,GAAG,CAAC4C,MAAM,CAAC,CAAC;MACd;;MAEA;MACA,KAAK,IAAI3B,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAInB,MAAM,CAACQ,MAAM,EAAEW,CAAC,IAAI,EAAE,EAAE;QAC3CjB,GAAG,CAAC4B,SAAS,CAAC,CAAC;QACf5B,GAAG,CAAC0C,MAAM,CAAC,CAAC,EAAEzB,CAAC,CAAC;QAChBjB,GAAG,CAAC2C,MAAM,CAAC7C,MAAM,CAACK,KAAK,EAAEc,CAAC,CAAC;QAC3BjB,GAAG,CAAC4C,MAAM,CAAC,CAAC;MACd;;MAEA;MACA,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvB,SAAS,CAACe,MAAM,EAAEQ,CAAC,EAAE,EAAE;QACzCvB,SAAS,CAACuB,CAAC,CAAC,CAACP,MAAM,CAAC,CAAC;QACrBhB,SAAS,CAACuB,CAAC,CAAC,CAACN,IAAI,CAAC,CAAC;MACrB;MAEAQ,gBAAgB,CAAC,CAAC;MAElBY,WAAW,GAAGG,qBAAqB,CAACF,OAAO,CAAC;IAC9C,CAAC;IAEDA,OAAO,CAAC,CAAC;;IAET;IACA,OAAO,MAAM;MACX3C,MAAM,CAAC8C,mBAAmB,CAAC,QAAQ,EAAEhD,UAAU,CAAC;MAChDiD,oBAAoB,CAACL,WAAW,CAAC;IACnC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEpD,OAAA;IAAK0D,SAAS,EAAC,2BAA2B;IAAAC,QAAA,gBACxC3D,OAAA;MAAQ4D,GAAG,EAAEzD,SAAU;MAACuD,SAAS,EAAC;IAAa;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eACzDhE,OAAA;MAAK0D,SAAS,EAAC;IAAuB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEV,CAAC;AAAC9D,EAAA,CAhJID,cAAc;AAAAgE,EAAA,GAAdhE,cAAc;AAkJpB,eAAeA,cAAc;AAAC,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}